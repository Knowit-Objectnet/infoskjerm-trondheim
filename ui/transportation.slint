import { Divider } from "utils.slint";
import { StandardTableView } from "std-widgets.slint";
export struct StopPlaceDataRow {
    transportMode: image,
    publicCode: string,
    destinationFrontText: string,
    aimedDepartureTime: string,
}

export struct StopPlaceData {
    stopName: string,
    stopDataRows: [StopPlaceDataRow]
}

component DisplayRow {
    in property <StopPlaceDataRow> stopPlaceDataRow;

    VerticalLayout {

        HorizontalLayout {
                alignment: start;
                padding-top: 0.5rem;

                Image {
                    height: 1.5rem;
                    width: 7.5%;
                    source: stopPlaceDataRow.transportMode;
                }
                Text {
                    font-size: 1.5rem;
                    width: 7.5%;
                    text: stopPlaceDataRow.publicCode;
                    color: whitesmoke;
                }
                Text {
                    font-size: 1.5rem;
                    width: 65%;
                    text: stopPlaceDataRow.destinationFrontText;
                    color: whitesmoke;
                }
                Text {
                    font-size: 1.5rem;
                    width: 20%;
                    text: stopPlaceDataRow.aimedDepartureTime;
                    color: whitesmoke;
                }
            }

        Divider {}
    }
}

component DisplayColumn {
    in property <StopPlaceData> stopPlaceData;

    VerticalLayout {

        Text {
            color: whitesmoke;
            font-size: 2rem;
            text: stopPlaceData.stopName;
            horizontal-alignment: left;
            padding-bottom: 1rem;
        }

        Divider {}

        for stopPlaceRow in stopPlaceData.stopDataRows : DisplayRow {
            stopPlaceDataRow: stopPlaceRow;
        }
    }
}

export component TransportationWidget{
    in property <[StopPlaceData]> stopPlacesData;

    VerticalLayout {
        Text {
            color: whitesmoke;
            font-size: 3rem;
            text: "Busstider";
            horizontal-alignment: left;
        }

        HorizontalLayout {
            padding-top: 1rem;

            for stopPlace in stopPlacesData : DisplayColumn {
                stopPlaceData: stopPlace;
            }
        }
    }
}